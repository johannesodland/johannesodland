<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Johannes Odland</title>
  <subtitle>Infrequent posts about CSS and other frontend stuff.</subtitle>
  <link href="https://johannesodland.github.io/feed.xml" rel="self" />
  <link href="https://johannesodland.github.io/" />
  <updated>2024-12-15T17:45:00Z</updated>
  <id>https://johannesodland.github.io/</id>
  <author>
    <name>Johannes Odland</name>
  </author>
  <entry>
    <title>Web Wish 15: Transparent Video</title>
    <link href="https://johannesodland.github.io/2024/12/15/web-wish-15-transparent-video.html" />
    <updated>2024-12-15T17:45:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/15/web-wish-15-transparent-video.html</id>
    <content type="html">&lt;p&gt;Today&#39;s wish is pretty simple.&lt;/p&gt;
&lt;p&gt;We use plenty of videos on our site that are not traditional youtube-style video.
This can for example be infographics or other visualizations.&lt;/p&gt;
&lt;p&gt;A common denominator is that the content should be able to be integrated seamlessly into the site.
It is possible to embed a background color into the video.
Unfortunately, the compressed colors will often stand out like a sore thumb, as they don&#39;t match the colors of the page.&lt;/p&gt;
&lt;p&gt;Additionally, it should be possible to reuse the video in different sections of the page,
and those sections might have different backgrounds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To address this we need transparent video.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, there&#39;s no single codec that supports this across browsers and devices.
&lt;a href=&quot;https://jakearchibald.com/&quot;&gt;Jake Archibald&lt;/a&gt; has described this issue in detail in &lt;a href=&quot;https://jakearchibald.com/2024/video-with-transparency/&quot;&gt;Video with alpha transparency on the web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This Christmas I&#39;m wishing for browser developers to put transparent video on their roadmap.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 14: Scroll Snapping in the Viewport</title>
    <link href="https://johannesodland.github.io/2024/12/14/web-wish-14-scroll-snapping-in-the-viewport.html" />
    <updated>2024-12-14T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/14/web-wish-14-scroll-snapping-in-the-viewport.html</id>
    <content type="html">&lt;p&gt;Scroll snapping has been around for a while now, and it&#39;s fantastic&lt;br&gt;
– until you apply &lt;code&gt;scroll-snap-type&lt;/code&gt; to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;That&#39;s when a whole host of issues start to surface.&lt;/p&gt;
&lt;p&gt;While scroll snapping works across most browsers and devices, applying it to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; introduces a range of issues,
particularly in Safari.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigation with VoiceOver breaks down:
&lt;ul&gt;
&lt;li&gt;Sometimes the &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=251003&quot;&gt;focused element is pushed off-screen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Other times the &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=282386&quot;&gt;page gets stuck at the top&lt;/a&gt;
– &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=272079&quot;&gt;Fragment links fail&lt;/a&gt;
– &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=245722&quot;&gt;Smooth scrolling is unreliable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This Holiday season, I&#39;m wishing for Safari to address these VoiceOver and navigation issues with scroll snapping.&lt;/p&gt;
&lt;p&gt;Relevant issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=272079&quot;&gt;Fragment links does not work with scroll-snap on root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=251003&quot;&gt;Scroll-snap snaps to wrong element after VoiceOver navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=282386&quot;&gt;REGRESSION(?): Page with scroll-snap is stuck at the top when navigating with VoiceOver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=245722&quot;&gt;Smooth scroll in viewport with scroll-snap fails on iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 13: Progress Functions</title>
    <link href="https://johannesodland.github.io/2024/12/13/web-wish-13-progress-functions.html" />
    <updated>2024-12-13T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/13/web-wish-13-progress-functions.html</id>
    <content type="html">&lt;p&gt;Continuing from yesterday&#39;s post,
one of the declarations that often causes repetition is setting up fluid typography.&lt;/p&gt;
&lt;p&gt;This is a two key steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculating the progress from a minimum to a maximum viewport size.&lt;/li&gt;
&lt;li&gt;Interpolating between two (font-size) values based on that progress.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While is possible to achieve this in browsers now, the setup is complex, hard to read,
and can involve a lot of repetition when applying it to multiple values.&lt;/p&gt;
&lt;p&gt;For a while the specs had a generic &lt;code&gt;mix()&lt;/code&gt; function that could be used at the property level,
and has since gained additional separate &lt;code&gt;*-mix()&lt;/code&gt; functions that can be used as individual components,
such as &lt;code&gt;calc-mix()&lt;/code&gt; that takes a &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; value and two calc sums.&lt;/p&gt;
&lt;p&gt;What remained was a method to simplify progress calculation.
With custom CSS functions, one could simplify the calculation and avoid repitition,
but as this is a calculation many authors will have to set up, why not make it a native CSS feature?&lt;/p&gt;
&lt;p&gt;Fortunately &lt;a href=&quot;https://drafts.csswg.org/css-values-5/#progress-func&quot;&gt;CSS Values and Units Module Level 5&lt;/a&gt; now defines such a general &lt;code&gt;progress()&lt;/code&gt; function,
and additionally a &lt;code&gt;media-progress()&lt;/code&gt; and a &lt;code&gt;container-progress()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It the future, they can be used as below:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;/* Alternatively */&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;media-progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a browser prototype for both the &lt;code&gt;progress()&lt;/code&gt;, &lt;code&gt;*-progress()&lt;/code&gt; and &lt;code&gt;*-mix()&lt;/code&gt; functions
to make progress towards a simpler and more readable setup of fluid typography.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/7268&quot;&gt;Proposal for a &#39;progress&#39; function to calculate progress between two &lt;length&gt; values&lt;/length&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/6245&quot;&gt;Interpolate values between breakpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 12: Custom CSS Functions</title>
    <link href="https://johannesodland.github.io/2024/12/12/web-wish-12-custom-css-functions.html" />
    <updated>2024-12-12T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/12/web-wish-12-custom-css-functions.html</id>
    <content type="html">&lt;p&gt;Some CSS declarations tend to repeat with only minor tweaks to their values
– like converting &lt;code&gt;px&lt;/code&gt; to &lt;code&gt;rem&lt;/code&gt;, or setting up fluid typography.&lt;/p&gt;
&lt;p&gt;With the introduction of custom properties,
it became possible to build function-like custom properties to reduce this repetition.
&lt;a href=&quot;https://www.miriamsuzanne.com&quot;&gt;Miriam Suzanne&lt;/a&gt; demonstrated this brilliantly in &lt;a href=&quot;https://www.smashingmagazine.com/2019/07/css-custom-properties-cascade/&quot;&gt;Custom Properties in the Cascade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While useful, this technique has its limitations.&lt;/p&gt;
&lt;p&gt;Thankfully &lt;a href=&quot;https://www.miriamsuzanne.com&quot;&gt;Miriam&lt;/a&gt; has proposed a new solution: &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9350&quot;&gt;Custom CSS Functions and Mixins&lt;/a&gt;.
The &lt;a href=&quot;https://drafts.csswg.org/css-mixins-1/&quot;&gt;editors draft&lt;/a&gt; is beginning to take shape,
and introduces the ability to define custom functions with &lt;code&gt;@function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s how it could look:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;--as-rem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--length &amp;lt;length&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; / 16px * 1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;--as-rem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;22px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mixins might still be a long way off, so this holiday, I&#39;m wishing for a browser prototype of custom CSS functions, available behind a flag.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9350&quot;&gt;Proposal: Custom CSS Functions &amp;amp; Mixins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 11: Scroll-Triggered Animations</title>
    <link href="https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html" />
    <updated>2024-12-11T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html</id>
    <content type="html">&lt;p&gt;We often use IntersectionObserver to trigger animations based on scroll position.
This works, but it feels excessive load javascript boilerplate just to play and pause an animation.&lt;/p&gt;
&lt;p&gt;Scroll-driven animations lets us declaratively bind animations to the scroll position,
but there&#39;s currently no way to declaratively play and pause regular animations based on scroll position.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://front-end.social/@ydaniv&quot;&gt;Yehonatan Daniv&lt;/a&gt; &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;has proposed&lt;/a&gt; a solution that the working group has resolved to draft into &lt;a href=&quot;https://drafts.csswg.org/css-animations-2/&quot;&gt;CSS Animations Level 2&lt;/a&gt;.
The proposal includes an &lt;code&gt;animation-trigger&lt;/code&gt; property, allowing you to define animation triggers like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --slide-in 330ms backwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;animation-trigger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; alternate entry 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope browsers will be interested in implementing this proposal.
It would help us eliminate a lot of boilerplate JavaScript.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;Add animation-trigger for triggering animations when an element is in a timeline&#39;s range&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 10: Srcset for Video</title>
    <link href="https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html" />
    <updated>2024-12-10T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html</id>
    <content type="html">&lt;p&gt;As mentioned earlier, &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt; successfully landed support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;responsive video&lt;/a&gt; last year.&lt;/p&gt;
&lt;p&gt;While we now can use media queries to art direct video sources,
it should also be possible to provide multiple resolutions for each source and have the browser pick the optimal one.&lt;/p&gt;
&lt;p&gt;This is why I&#39;m wishing for browsers to implement support for &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; on the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements.
And, while they&#39;re at it figuring out how to support &lt;code&gt;sizes=auto&lt;/code&gt; for video would be a nice bonus.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10379&quot;&gt;HTML Video and its Source Elements Should Support SRCSET and SIZES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 9: Used Color Scheme Media Query</title>
    <link href="https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html" />
    <updated>2024-12-09T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html</id>
    <content type="html">&lt;p&gt;Currently, you can use &lt;code&gt;prefers-color-scheme&lt;/code&gt; in the &lt;code&gt;media&lt;/code&gt; attribute of a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;
to provide video or images that matches the users preferred color scheme.&lt;/p&gt;
&lt;p&gt;However, this might not actually match the used color scheme,
as a different color scheme can be set in either &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt; or by setting the &lt;code&gt;color-scheme&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;I need a way to provide image and video sources that match the &lt;em&gt;used&lt;/em&gt; color scheme and not just the preferred one.
I&#39;ve written extensively about it in &lt;a href=&quot;https://johannesodland.github.io/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html&quot;&gt;The Case for a Used-Color-Scheme Media Feature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This holiday I&#39;m wishing for a way to provide light and dark mode image sources, so they can match the used color scheme.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249&quot;&gt;Effect of &lt;meta name=&quot;color-scheme&quot;&gt; on the (prefers-color-scheme) MQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 8: End Side Padding on Scroll Containers</title>
    <link href="https://johannesodland.github.io/2024/12/08/web-wish-8-end-side-padding.html" />
    <updated>2024-12-08T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/08/web-wish-8-end-side-padding.html</id>
    <content type="html">&lt;p&gt;One of the longest-running issues I&#39;ve followed is &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;how to handle padding in a scroll container&lt;/a&gt;.
The issue was first opened in 2016.&lt;/p&gt;
&lt;p&gt;Most developers expected padding to be added at the end of the in-flow content of the scroll container.
This was also how it was specified in &lt;a href=&quot;https://www.w3.org/TR/css-overflow-3/&quot;&gt;Overflow 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, browsers handled this differently, and it wasn&#39;t clear if the desired behavior was web-compatible.
Inline padding was particularly problematic,
as all browsers agreed on excluding it.
Changing this could cause web-compat issues as pages could rely on the current behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It was a mess.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But slowly and steadily, the issues were worked out.&lt;/p&gt;
&lt;p&gt;In 2019 the working group resolved to &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;always include padding in grid and flexbox containers&lt;/a&gt;,
as there were no web-compat issues there.&lt;/p&gt;
&lt;p&gt;Then, Blink finally ironed out the last web-compat issues,
and in 2022, the working group resolved to always include inline-end padding.&lt;/p&gt;
&lt;p&gt;Firefox has just begun passing &lt;a href=&quot;https://wpt.fyi/results/css/css-overflow/scrollable-overflow-padding.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;all the tests&lt;/a&gt;,
and while Safari is not fully compliant yet, the situation has improved significantly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or, so I thought.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that IntersectionObserver in Safari &lt;a href=&quot;https://wpt.fyi/results/intersection-observer/padding-clip.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;doesn&#39;t support padding on the scroll container correctly&lt;/a&gt;.
While padding is now usable on scroll containers in many cases,
any IntersectionObservers that use the scroll container as root may behave erratically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, this Christmas I&#39;m wishing for Safari to support padding correctly in IntersectionObservers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;Include padding in scrollable overflow area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;Clarify padding in overflow content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/IntersectionObserver/issues/504&quot;&gt;Clarify root rect with overflow and padding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=263316&quot;&gt;IntersectionObserver root rect with padding is incorrect if there&#39;s overflow clipping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 7: Custom Element Disconnected Signal</title>
    <link href="https://johannesodland.github.io/2024/12/07/web-wish-7-custom-element-disconnected-signal.html" />
    <updated>2024-12-07T19:30:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/07/web-wish-7-custom-element-disconnected-signal.html</id>
    <content type="html">&lt;p&gt;Managing lifecycles in custom elements can be tedious.
For instance, any event listener on global objects added in &lt;code&gt;connectedCallback()&lt;/code&gt; must be removed in &lt;code&gt;disconnectedCallback()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This double bookkeeping is error-prone, and could be simpler.
Using an &lt;code&gt;AbortController&lt;/code&gt; can simplify things by automatically removing event listeners when the &lt;code&gt;abort()&lt;/code&gt; method is called.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  #abortController
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This process would be much cleaner if the HTMLElement offered a built-in &lt;code&gt;disconnectedSignal()&lt;/code&gt;.
Luckily, &lt;a href=&quot;https://indieweb.social/@keithamus&quot;&gt;Keith Cirkel&lt;/a&gt; &lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;has proposed such a signal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this proposal, the example above would become:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnectedSignal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a &lt;code&gt;disconnectedSignal()&lt;/code&gt; method to automatically remove event listeners
when an element is disconnected.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;Provide an AbortSignal that aborts when Nodes become disconnected&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 6: Responsive Posters</title>
    <link href="https://johannesodland.github.io/2024/12/06/web-wish-6-responsive-posters.html" />
    <updated>2024-12-06T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/06/web-wish-6-responsive-posters.html</id>
    <content type="html">&lt;p&gt;Last year, we finally regained support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;using media queries for delivering responsive video&lt;/a&gt;,
thanks to &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is awesome, but there&#39;s still room for improvement.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element still supports only a single source for the poster image.
Wouldn&#39;t it be great if you could deliver responsive poster images along with the responsive video?&lt;/p&gt;
&lt;p&gt;One way to do this would be &lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;allowing a child &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element to control the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; poster&lt;/a&gt;.
This would enable support for using media-queries to art direct the poster images, matching the video source.
It would also allow for multiple resolutions of the poster image,
lazy-loading of the poster image and adding an alt-text to the poster image.&lt;/p&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a way to add responsive poster images to the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;HTML Video: Allow a child Picture Element to Control the Video Poster Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/6636&quot;&gt;Lazy loading video element poster attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/7954&quot;&gt;Considerations for providing alternative text to video poster graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>