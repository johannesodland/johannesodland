<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Johannes Odland</title>
  <subtitle>Infrequent posts about CSS and other frontend stuff.</subtitle>
  <link href="https://johannesodland.github.io/feed.xml" rel="self" />
  <link href="https://johannesodland.github.io/" />
  <updated>2024-12-11T15:00:00Z</updated>
  <id>https://johannesodland.github.io/</id>
  <author>
    <name>Johannes Odland</name>
  </author>
  <entry>
    <title>Web Wish 11: Srcset for Video</title>
    <link href="https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html" />
    <updated>2024-12-11T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html</id>
    <content type="html">&lt;p&gt;We often use IntersectionObserver to trigger animations based on scroll position.
This works, but it feels excessive load javascript boilerplate just to play and pause an animation.&lt;/p&gt;
&lt;p&gt;Scroll-driven animations lets us declaratively bind animations to the scroll position,
but there&#39;s currently no way to declaratively play and pause regular animations based on scroll position.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://front-end.social/@ydaniv&quot;&gt;Yehonatan Daniv&lt;/a&gt; &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;has proposed&lt;/a&gt; a solution that the working group has resolved to draft into &lt;a href=&quot;https://drafts.csswg.org/css-animations-2/&quot;&gt;CSS Animations Level 2&lt;/a&gt;.
The proposal includes an &lt;code&gt;animation-trigger&lt;/code&gt; property, allowing you to define animation triggers like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --slide-in 330ms backwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;animation-trigger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; alternate entry 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope browsers will be interested in implementing this proposal.
It would help us eliminate a lot of boilerplate JavaScript.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;Add animation-trigger for triggering animations when an element is in a timeline&#39;s range&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 10: Srcset for Video</title>
    <link href="https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html" />
    <updated>2024-12-10T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html</id>
    <content type="html">&lt;p&gt;As mentioned earlier, &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt; successfully landed support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;responsive video&lt;/a&gt; last year.&lt;/p&gt;
&lt;p&gt;While we now can use media queries to art direct video sources,
it should also be possible to provide multiple resolutions for each source and have the browser pick the optimal one.&lt;/p&gt;
&lt;p&gt;This is why I&#39;m wishing for browsers to implement support for &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; on the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements.
And, while they&#39;re at it figuring out how to support &lt;code&gt;sizes=auto&lt;/code&gt; for video would be a nice bonus.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10379&quot;&gt;HTML Video and its Source Elements Should Support SRCSET and SIZES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 9: Used Color Scheme Media Query</title>
    <link href="https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html" />
    <updated>2024-12-09T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html</id>
    <content type="html">&lt;p&gt;Currently, you can use &lt;code&gt;prefers-color-scheme&lt;/code&gt; in the &lt;code&gt;media&lt;/code&gt; attribute of a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;
to provide video or images that matches the users preferred color scheme.&lt;/p&gt;
&lt;p&gt;However, this might not actually match the used color scheme,
as a different color scheme can be set in either &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt; or by setting the &lt;code&gt;color-scheme&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;I need a way to provide image and video sources that match the &lt;em&gt;used&lt;/em&gt; color scheme and not just the preferred one.
I&#39;ve written extensively about it in &lt;a href=&quot;https://johannesodland.github.io/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html&quot;&gt;The Case for a Used-Color-Scheme Media Feature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This holiday I&#39;m wishing for a way to provide light and dark mode image sources, so they can match the used color scheme.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249&quot;&gt;Effect of &lt;meta name=&quot;color-scheme&quot;&gt; on the (prefers-color-scheme) MQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 8: End Side Padding on Scroll Containers</title>
    <link href="https://johannesodland.github.io/2024/12/08/web-wish-8-end-side-padding.html" />
    <updated>2024-12-08T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/08/web-wish-8-end-side-padding.html</id>
    <content type="html">&lt;p&gt;One of the longest-running issues I&#39;ve followed is &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;how to handle padding in a scroll container&lt;/a&gt;.
The issue was first opened in 2016.&lt;/p&gt;
&lt;p&gt;Most developers expected padding to be added at the end of the in-flow content of the scroll container.
This was also how it was specified in &lt;a href=&quot;https://www.w3.org/TR/css-overflow-3/&quot;&gt;Overflow 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, browsers handled this differently, and it wasn&#39;t clear if the desired behavior was web-compatible.
Inline padding was particularly problematic,
as all browsers agreed on excluding it.
Changing this could cause web-compat issues as pages could rely on the current behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It was a mess.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But slowly and steadily, the issues were worked out.&lt;/p&gt;
&lt;p&gt;In 2019 the working group resolved to &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;always include padding in grid and flexbox containers&lt;/a&gt;,
as there were no web-compat issues there.&lt;/p&gt;
&lt;p&gt;Then, Blink finally ironed out the last web-compat issues,
and in 2022, the working group resolved to always include inline-end padding.&lt;/p&gt;
&lt;p&gt;Firefox has just begun passing &lt;a href=&quot;https://wpt.fyi/results/css/css-overflow/scrollable-overflow-padding.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;all the tests&lt;/a&gt;,
and while Safari is not fully compliant yet, the situation has improved significantly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or, so I thought.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that IntersectionObserver in Safari &lt;a href=&quot;https://wpt.fyi/results/intersection-observer/padding-clip.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;doesn&#39;t support padding on the scroll container correctly&lt;/a&gt;.
While padding is now usable on scroll containers in many cases,
any IntersectionObservers that use the scroll container as root may behave erratically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, this Christmas I&#39;m wishing for Safari to support padding correctly in IntersectionObservers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;Include padding in scrollable overflow area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;Clarify padding in overflow content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/IntersectionObserver/issues/504&quot;&gt;Clarify root rect with overflow and padding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=263316&quot;&gt;IntersectionObserver root rect with padding is incorrect if there&#39;s overflow clipping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 7: Custom Element Disconnected Signal</title>
    <link href="https://johannesodland.github.io/2024/12/07/web-wish-7-custom-element-disconnected-signal.html" />
    <updated>2024-12-07T19:30:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/07/web-wish-7-custom-element-disconnected-signal.html</id>
    <content type="html">&lt;p&gt;Managing lifecycles in custom elements can be tedious.
For instance, any event listener on global objects added in &lt;code&gt;connectedCallback()&lt;/code&gt; must be removed in &lt;code&gt;disconnectedCallback()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This double bookkeeping is error-prone, and could be simpler.
Using an &lt;code&gt;AbortController&lt;/code&gt; can simplify things by automatically removing event listeners when the &lt;code&gt;abort()&lt;/code&gt; method is called.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  #abortController
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This process would be much cleaner if the HTMLElement offered a built-in &lt;code&gt;disconnectedSignal()&lt;/code&gt;.
Luckily, &lt;a href=&quot;https://indieweb.social/@keithamus&quot;&gt;Keith Cirkel&lt;/a&gt; &lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;has proposed such a signal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this proposal, the example above would become:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnectedSignal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a &lt;code&gt;disconnectedSignal()&lt;/code&gt; method to automatically remove event listeners
when an element is disconnected.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;Provide an AbortSignal that aborts when Nodes become disconnected&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 6: Responsive Posters</title>
    <link href="https://johannesodland.github.io/2024/12/06/web-wish-6-responsive-posters.html" />
    <updated>2024-12-06T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/06/web-wish-6-responsive-posters.html</id>
    <content type="html">&lt;p&gt;Last year, we finally regained support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;using media queries for delivering responsive video&lt;/a&gt;,
thanks to &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is awesome, but there&#39;s still room for improvement.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element still supports only a single source for the poster image.
Wouldn&#39;t it be great if you could deliver responsive poster images along with the responsive video?&lt;/p&gt;
&lt;p&gt;One way to do this would be &lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;allowing a child &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element to control the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; poster&lt;/a&gt;.
This would enable support for using media-queries to art direct the poster images, matching the video source.
It would also allow for multiple resolutions of the poster image,
lazy-loading of the poster image and adding an alt-text to the poster image.&lt;/p&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a way to add responsive poster images to the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;HTML Video: Allow a child Picture Element to Control the Video Poster Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/6636&quot;&gt;Lazy loading video element poster attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/7954&quot;&gt;Considerations for providing alternative text to video poster graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 5: Overflow Contribution</title>
    <link href="https://johannesodland.github.io/2024/12/05/web-wish-5-overflow-contribution.html" />
    <updated>2024-12-05T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/05/web-wish-5-overflow-contribution.html</id>
    <content type="html">&lt;p&gt;Have you ever had a scrollbar appear unexpectedly?
Perhaps a rogue horizontal scrollbar on the page?&lt;/p&gt;
&lt;p&gt;I often find myself hunting for the element that causes the scrollable overflow area to grow
– the cause of the rogue scrollbar.
Normally I can solve the issue by adding &lt;code&gt;overflow: clip&lt;/code&gt; to a parent element.&lt;/p&gt;
&lt;p&gt;Unfortunately, that&#39;s not always possible.
You might not want to clip the element to the parent elements bounds.
Additionally, adding &lt;code&gt;overflow: clip&lt;/code&gt; forces &lt;code&gt;transform-style: flat&lt;/code&gt;,
which can wreak havoc if the elements are part of a 3d rendering context.&lt;/p&gt;
&lt;p&gt;Imagine being able to set a CSS property like &lt;code&gt;overflow-contribution: none&lt;/code&gt; to exclude elements from
contributing to the overflow area?&lt;/p&gt;
&lt;p&gt;The CSSWG has resolved to adopt this feature, but it still needs to a formal specification.&lt;/p&gt;
&lt;p&gt;This holiday season, I&#39;m hoping for implementer interest in a CSS property that prevent elements from contributing to scrollable overflow.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8361&quot;&gt;add method to prevent elements from contributing to scrollable overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8400&quot;&gt;Ability to ignore specific descendants when generating scrollbars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 4: set-range-text command</title>
    <link href="https://johannesodland.github.io/2024/12/04/web-wish-4-set-range-text-command.html" />
    <updated>2024-12-04T18:30:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/04/web-wish-4-set-range-text-command.html</id>
    <content type="html">&lt;p&gt;My drafts folder is full of half written posts on punctuation and special characters.
The reason I come back to this theme is that the technological development of the last 100+ years
have made it incredibly hard to enter and edit special characters on the web.&lt;/p&gt;
&lt;p&gt;In Norwegian, the most common quotation marks are not available on the keyboard,
so professional writers have to rely on difficult to remember short codes that vary across operating systems.&lt;/p&gt;
&lt;p&gt;Some editors use “smart quotes” to automatically replace the typed characters with the correct ones,
but this solution only works within certain systems,
and lacks the flexibility authors need to choose specific quotation marks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time and time again I&#39;ve had to be the middle man apologizing for how hard this is.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the lacking physical keys for special characters across languages,
it should be easy to add special characters to form inputs –
preferably without complex JavaScript setup.&lt;/p&gt;
&lt;p&gt;The recent &lt;a href=&quot;https://open-ui.org/components/invokers.explainer/&quot;&gt;Invoker Commands proposal&lt;/a&gt; makes it possible to add commands to buttons in a declarative
way, removing the need for JavaScript and paving the cowpath for simple commands like opening and closing a dialog.
Initially this will support commands like &lt;code&gt;toggle-popover&lt;/code&gt;, &lt;code&gt;show-modal&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;,
but many other commands like &lt;code&gt;step-up&lt;/code&gt; and &lt;code&gt;step-down&lt;/code&gt; have been suggested.&lt;/p&gt;
&lt;p&gt;To make entering special characters easier for everyone,
I wish for a new declarative &lt;a href=&quot;https://github.com/openui/open-ui/issues/1062&quot;&gt;&lt;code&gt;set-range-text&lt;/code&gt; command&lt;/a&gt; for &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;
and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, that calls &lt;code&gt;.setRangeText()&lt;/code&gt; with the button&#39;s value.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openui/open-ui/issues/1062&quot;&gt;[invokers] setRangeText for textarea and inputs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 3: Layer Based SVG Engine (LBSE)</title>
    <link href="https://johannesodland.github.io/2024/12/03/web-wish-3-layer-based-svg-engine.html" />
    <updated>2024-12-03T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/03/web-wish-3-layer-based-svg-engine.html</id>
    <content type="html">&lt;p&gt;I love listening to &lt;a href=&quot;https://www.igalia.com/chats/&quot;&gt;Igalia Chats&lt;/a&gt;,
especially when they bring on people who have been an integral part of the development of the web.
One of my favourite episodes is where Nikolas Zimmermann talks about
&lt;a href=&quot;https://www.igalia.com/chats/Igalia-Chats-Niko-SVG-WPE&quot;&gt;how he and Rob Buis built the KSVG library&lt;/a&gt; which eventually powered SVG rendering in WebKit.&lt;/p&gt;
&lt;p&gt;In that episode he explains how HTML and SVG currently has two separate rendering paths in WebKit.
While SVG was once more powerful than HTML and CSS, with support for transforms, filters and masking,
HTML and CSS has since gained these capabilities &lt;em&gt;and&lt;/em&gt; now have a hardware accelerated rendering path.&lt;/p&gt;
&lt;p&gt;The current SVG engine in WebKit does not support hardware-accelerated compositing.
Changes to transforms or opacity in an SVG triggers a full re-render, while in HTML and CSS such changes would
be handled through hardware-accelerated compositing.&lt;/p&gt;
&lt;p&gt;At the time of recording, Zimmerman and Igalia had prototyped a way to harmonize the rendering of HTML and SVG,
using the Layer Tree — a structure that organizes rendering layers for compositing — to enable hardware accelerated SVG rendering.
This harmonization would remove duplication and allow SVG to handle complex animations more efficiently.&lt;/p&gt;
&lt;p&gt;It&#39;s almost five years since that episode aired, and a lot has happened in the meanwhile.
While the prototype proved the concepts of the new &lt;a href=&quot;https://wpewebkit.org/blog/05-new-svg-engine.html&quot;&gt;Layer Based SVG Engine (LBSE)&lt;/a&gt;,
it was still just a prototype and needed to be upstreamed into the WebCore in manageable, reviewable chunks.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://wpewebkit.org/blog/05-new-svg-engine.html&quot;&gt;Status of the new SVG engine in WebKit&lt;/a&gt; post on &lt;a href=&quot;https://johannesodland.github.io/2024/12/03/wpewebkit.org&quot;&gt;wpewebkit.org&lt;/a&gt; covers the progress in detail.&lt;/p&gt;
&lt;p&gt;Currently, LBSE coexists with the legacy engine behind a compile-time flag.
The new engine adds hardware accelerated compositing, 3D-transforms, and z-index support for all SVG elements.&lt;/p&gt;
&lt;p&gt;Before it can replace the legacy engine, the new SVG engine still needs to reach feature parity,
meet security requirements, and match the legacy engine&#39;s performance benchmarks.
An &lt;a href=&quot;https://wpewebkit.org/blog/status-of-lbse-in-webkit.html&quot;&gt;update from this summer&lt;/a&gt; covers the progress made over the last year,
showing that the new engine is inching towards becoming a complete replacement.&lt;/p&gt;
&lt;p&gt;While it &lt;em&gt;is&lt;/em&gt; getting closer to replace the old engine, there are still some issues that needs to be resolved before
WebKit can make the switch.&lt;/p&gt;
&lt;p&gt;While asking for LBSE to land before Christmas might be too much,
I hope Igalia Chats will invite Nikolas Zimmermann back to discuss the progress made over the last five years.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=90738&quot;&gt;Harmonize HTML &amp;amp; SVG rendering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 2: Native Low Quality Image Preview (LQIP)</title>
    <link href="https://johannesodland.github.io/2024/12/02/web-wish-2-native-low-quality-image-preview-lqip.html" />
    <updated>2024-12-02T17:30:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/02/web-wish-2-native-low-quality-image-preview-lqip.html</id>
    <content type="html">&lt;p&gt;Implementing lazy-loading images has never been easier.&lt;/p&gt;
&lt;p&gt;First we got support for the &lt;a href=&quot;https://github.com/whatwg/html/issues/2806&quot;&gt;&lt;code&gt;loading=lazy&lt;/code&gt;&lt;/a&gt; attribute, making it easy to defer images.
Then came automatic aspect-ratio calculations based on &lt;a href=&quot;https://github.com/WICG/intrinsicsize-attribute/issues/16#issuecomment-503245998&quot;&gt;the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes&lt;/a&gt;,
fixing annoying layout shifts.
Just recently, support for &lt;a href=&quot;https://github.com/whatwg/html/issues/4654&quot;&gt;&lt;code&gt;sizes=auto&lt;/code&gt;&lt;/a&gt; has started to arrive,
taking away the hassle – and sometimes impossible task – of specifying image sizes upfront.&lt;/p&gt;
&lt;p&gt;There is one thing that I think is missing from native lazy loading images, though.
That is having support for low quality image previews (LQIP).&lt;/p&gt;
&lt;p&gt;On a fast fiber connection, you might not even notice that the images are lazy-loaded.
But on a slow connection, they can appear as blank placeholders before the actual image is loaded.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use tricks like setting &lt;code&gt;background-image: url(lqip.webp)&lt;/code&gt; for low quality previews,
but this only works for the simplest cases.&lt;/p&gt;
&lt;p&gt;Things get messy if the image has multiple sources, or uses &lt;code&gt;object-fit&lt;/code&gt; settings like &lt;code&gt;contain&lt;/code&gt; or &lt;code&gt;cover&lt;/code&gt; –
at which point it can become &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8243&quot;&gt;nearly impossible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, for Christmas, I wish that low quality image previews were natively supported,
and that we can set an LQIP source for each &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;element.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/3631&quot;&gt;Controlling the appearance of images being loaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8243&quot;&gt;Add &#39;replacement-box&#39; as option to background-origin and background-clip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>