<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Johannes Odland</title>
  <subtitle>Infrequent posts about CSS and other frontend stuff.</subtitle>
  <link href="https://johannesodland.github.io/feed.xml" rel="self" />
  <link href="https://johannesodland.github.io/" />
  <updated>2024-12-18T15:00:00Z</updated>
  <id>https://johannesodland.github.io/</id>
  <author>
    <name>Johannes Odland</name>
  </author>
  <entry>
    <title>Web Wish 18: Sticky Next</title>
    <link href="https://johannesodland.github.io/2024/12/18/web-wish-18-sticky-next.html" />
    <updated>2024-12-18T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/18/web-wish-18-sticky-next.html</id>
    <content type="html">&lt;p&gt;Sticky positioning lets you “stick” an element to a position relative to the scroll-port,
instead of scrolling it out of the screen.&lt;/p&gt;
&lt;p&gt;It&#39;s awesome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But o, so limiting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The element will only be “stuck” as far as is possible while staying within its containing block,
which is the nearest block-level container.
It would be great if we could &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9868&quot;&gt;choose a different containing block&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&#39;s not really possible to configure how far inside that containing it should stay sticky.
Or, it is, but the CSS working group has &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9052#issuecomment-1642600755&quot;&gt;resolved to remove that option&lt;/a&gt;.
It would be awesome if it was possible to &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10754&quot;&gt;configure the insets from the containing block&lt;/a&gt;,
and not just the insets from the scroll-port.&lt;/p&gt;
&lt;p&gt;It would also be awesome if we could let sticky elements &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/2496#issuecomment-1002312635&quot;&gt;stack against each other&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, this year I&#39;m hoping the CSS working group and browser implementors can start looking into how we can make sticky positioning even better.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;p&gt;– &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/11145&quot;&gt;[css-position] Meta-issue: Unresolved sticky positioning use cases&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 17: Viewport Relative Lengths</title>
    <link href="https://johannesodland.github.io/2024/12/17/web-wish-17-viewport-relative-lengths.html" />
    <updated>2024-12-17T19:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/17/web-wish-17-viewport-relative-lengths.html</id>
    <content type="html">&lt;p&gt;Viewport relative units come in really handy when you need to size elements relative to the viewport,
say a hero element that should have the exact size of the viewport.&lt;/p&gt;
&lt;p&gt;There&#39;s one catch though, the size of the viewport can change dynamically as mobile browser interfaces,
like the address bar, expand and collapse as users scroll.
If the elements on the page expand and collapse as a result, the layout of the page ends up unstable,
and the user can experience bouncing around the page as he changes scroll direction.&lt;/p&gt;
&lt;p&gt;This is why browsers made &lt;code&gt;vh&lt;/code&gt; units stable, reflecting the size of the viewport with browser interfaces collapsed.
This ensures that the layout does not shift unexpectedly, providing a smoother user experience.&lt;/p&gt;
&lt;p&gt;This also prompted the CSS working group to standardize new viewport units.
The new units include two stable sets: one for the large viewport with interfaces retracted (&lt;code&gt;lv*&lt;/code&gt;), and one for the small viewport with user interfaces expanded (&lt;code&gt;sv*&lt;/code&gt;).
The final set of units allows authors to opt in to dynamic sizes (&lt;code&gt;dv*&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Most of the major browsers support the new viewport units correctly, &lt;a href=&quot;https://github.com/mozilla-mobile/firefox-ios/issues/22607&quot;&gt;except for Firefox on iOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The new units were a big step forward, but there&#39;s still a challenge: inconsistent support in In App Browsers (IABs).
Apps like social media, messaging platforms and other services often open links in IABs, to keep users within their ecosystems.
Unfortunately many of these IABs fail to implement viewport units correctly.&lt;/p&gt;
&lt;p&gt;In fact, the SFSafariViewController does not seem to &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=255708&quot;&gt;handle the viewport units correctly&lt;/a&gt;.
This is particularly problematic, since SFSafariViewController is widely used in popular apps like Slack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a major frustration for authors that have to maintain fragile javascript workarounds to make sure their page layout doesn&#39;t break
– and for users who experience broken pages as a result.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today, I&#39;m wishing for Apple and app developers to collaborate on fixing viewport units in IABs,
making viewport-based layouts more reliable for authors and users alike.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 16: Role Text Next</title>
    <link href="https://johannesodland.github.io/2024/12/16/web-wish-16-role-text-alternative.html" />
    <updated>2024-12-16T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/16/web-wish-16-role-text-alternative.html</id>
    <content type="html">&lt;p&gt;How should &lt;code&gt;&amp;lt;span&amp;gt;C&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;A&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;T&amp;lt;/span&amp;gt;&lt;/code&gt; or &lt;code&gt;IV&lt;/code&gt; be read by Assistive Technology (AT)?
Should it be pronounced “C-A-T” and “I-V” or as “cat” and “Roman numeral four”?&lt;/p&gt;
&lt;p&gt;Currently, this decision is left up to AT and browsers, which is practical and “safe”.
As authors we can&#39;t predict if the content will be spoken aloud or rendered in braille.&lt;/p&gt;
&lt;p&gt;However, the AT and the browser can&#39;t always infer the authors intent.
For example, splitting cat into separate spans might be purely decorative,
and “IV” could mean intravenous in stead of a numeral.&lt;/p&gt;
&lt;h2&gt;Say Hello (and Goodbye) to &lt;code&gt;role=text&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For a time there was &lt;a href=&quot;https://github.com/w3c/aria/issues/870&quot;&gt;a proposal to add &lt;code&gt;role=text&lt;/code&gt;&lt;/a&gt; to ARIA.
This role would flatten the accessibility tree, presenting the contents as plain text.
Additionally, it would allow &lt;code&gt;aria-label&lt;/code&gt; to override the presentation of the contents.&lt;/p&gt;
&lt;p&gt;Both WebKit and Blink implemented support for &lt;code&gt;role=text&lt;/code&gt;, and many sites started to rely on it.
But in 2023 &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=260641&quot;&gt;WebKit dropped support&lt;/a&gt;,
and ARIA closed the &lt;a href=&quot;https://github.com/w3c/aria/issues/870&quot;&gt;re-add role=text issue&lt;/a&gt; shortly after.&lt;/p&gt;
&lt;h2&gt;Why &lt;code&gt;role=text&lt;/code&gt; Failed&lt;/h2&gt;
&lt;p&gt;Many opposed &lt;code&gt;role=text&lt;/code&gt;, and with good reason:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flatting the accessibility hides the underlying structure, which can deny the users the ability to inspect the original content.&lt;/li&gt;
&lt;li&gt;While breaking up &lt;code&gt;IV&lt;/code&gt; into &lt;code&gt;I V&lt;/code&gt; might help speech synthesis, it could confuse braille users by teaching incorrect spellings.&lt;/li&gt;
&lt;li&gt;Often there&#39;s a better solution, such as using &lt;code&gt;role=img&lt;/code&gt; in &lt;code&gt;&amp;lt;span role=&amp;quot;img&amp;quot; aria-label=&amp;quot;love&amp;quot;&amp;gt;♥︎&amp;lt;/span&amp;gt; New York.&lt;/code&gt;
Here &lt;code&gt;role=img&lt;/code&gt; communicates that “love” is represented as an icon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today &lt;code&gt;role=text&lt;/code&gt; is practically dead, though it&#39;s still &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=260685&quot;&gt;behind a flag in WebKit&lt;/a&gt;,
awaiting complete removal if there&#39;s no protests.&lt;/p&gt;
&lt;h2&gt;Exploring Alternatives&lt;/h2&gt;
&lt;p&gt;For a while there was an initiative to &lt;a href=&quot;https://github.com/w3c/aria/issues/699&quot;&gt;add a new &lt;code&gt;aria-textseparation&lt;/code&gt; property&lt;/a&gt;
that would let authors specify how text content should be separated from neighbouring elements.
Unfortunately the proposal has been stagnant since 2019.&lt;/p&gt;
&lt;p&gt;There has been some progress, though.
ARIA 1.3 has added &lt;code&gt;aria-braillelabel&lt;/code&gt; that allows us to provide a separate accessible name for Braille.
There is also ongoing work to &lt;a href=&quot;https://www.w3.org/WAI/pronunciation/&quot;&gt;enable text-to-speach to pronounce words correctly&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Remaining Issue&lt;/h2&gt;
&lt;p&gt;An unresolved problem involves text that is split into separate inline elements for presentational purposes.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Fear the goverments&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;gift will be expencive&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using VoiceOver on an iPhone, this will read as two separate elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Fear the governments, link”&lt;/li&gt;
&lt;li&gt;“gift will be expensive, link”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily, for anchor elements (and others with a role that accept &lt;code&gt;aria-label&lt;/code&gt;) we can fix this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Fear the governments gift will be expensive&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;...&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if the text isn&#39;t part of an element that support &lt;code&gt;aria-label&lt;/code&gt;,
there is no way to tell AT whether to read the text continuously or with pauses.&lt;/p&gt;
&lt;p&gt;It&#39;s important for AT users to inspect structural changes, but excessive detail can create noise.
I see that in many cases AT users should be able to inspect that something is happening with the text,
For instance:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;C&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;A&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;T&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might be split for animation purposes, and would be invisible to users with &lt;code&gt;prefers-reduced-motion: reduce&lt;/code&gt;.
However, some AT would still read each characters separately, leading to a noisy experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Excessive verbosity can sometimes hinder more than help.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;My holiday wish&lt;/h2&gt;
&lt;p&gt;This Holiday season, I&#39;m wishing for a new solution to help AT interpret text that is split into individual elements.
It seems like &lt;code&gt;role=text&lt;/code&gt; wasn&#39;t the answer. &lt;a href=&quot;https://github.com/w3c/aria/issues/699&quot;&gt;&lt;code&gt;aria-textseparation&lt;/code&gt;&lt;/a&gt; seems to have faded away.
What we need is the next &lt;code&gt;role=text&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 15: Transparent Video</title>
    <link href="https://johannesodland.github.io/2024/12/15/web-wish-15-transparent-video.html" />
    <updated>2024-12-15T17:45:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/15/web-wish-15-transparent-video.html</id>
    <content type="html">&lt;p&gt;Today&#39;s wish is pretty simple.&lt;/p&gt;
&lt;p&gt;We use plenty of videos on our site that are not traditional youtube-style video.
This can for example be infographics or other visualizations.&lt;/p&gt;
&lt;p&gt;A common denominator is that the content should be able to be integrated seamlessly into the site.
It is possible to embed a background color into the video.
Unfortunately, the compressed colors will often stand out like a sore thumb, as they don&#39;t match the colors of the page.&lt;/p&gt;
&lt;p&gt;Additionally, it should be possible to reuse the video in different sections of the page,
and those sections might have different backgrounds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To address this we need transparent video.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, there&#39;s no single codec that supports this across browsers and devices.
&lt;a href=&quot;https://jakearchibald.com/&quot;&gt;Jake Archibald&lt;/a&gt; has described this issue in detail in &lt;a href=&quot;https://jakearchibald.com/2024/video-with-transparency/&quot;&gt;Video with alpha transparency on the web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This Christmas I&#39;m wishing for browser developers to put transparent video on their roadmap.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 14: Scroll Snapping in the Viewport</title>
    <link href="https://johannesodland.github.io/2024/12/14/web-wish-14-scroll-snapping-in-the-viewport.html" />
    <updated>2024-12-14T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/14/web-wish-14-scroll-snapping-in-the-viewport.html</id>
    <content type="html">&lt;p&gt;Scroll snapping has been around for a while now, and it&#39;s fantastic&lt;br&gt;
– until you apply &lt;code&gt;scroll-snap-type&lt;/code&gt; to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;That&#39;s when a whole host of issues start to surface.&lt;/p&gt;
&lt;p&gt;While scroll snapping works across most browsers and devices, applying it to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; introduces a range of issues,
particularly in Safari.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigation with VoiceOver breaks down:
&lt;ul&gt;
&lt;li&gt;Sometimes the &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=251003&quot;&gt;focused element is pushed off-screen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Other times the &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=282386&quot;&gt;page gets stuck at the top&lt;/a&gt;
– &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=272079&quot;&gt;Fragment links fail&lt;/a&gt;
– &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=245722&quot;&gt;Smooth scrolling is unreliable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This Holiday season, I&#39;m wishing for Safari to address these VoiceOver and navigation issues with scroll snapping.&lt;/p&gt;
&lt;p&gt;Relevant issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=272079&quot;&gt;Fragment links does not work with scroll-snap on root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=251003&quot;&gt;Scroll-snap snaps to wrong element after VoiceOver navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=282386&quot;&gt;REGRESSION(?): Page with scroll-snap is stuck at the top when navigating with VoiceOver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=245722&quot;&gt;Smooth scroll in viewport with scroll-snap fails on iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 13: Progress Functions</title>
    <link href="https://johannesodland.github.io/2024/12/13/web-wish-13-progress-functions.html" />
    <updated>2024-12-13T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/13/web-wish-13-progress-functions.html</id>
    <content type="html">&lt;p&gt;Continuing from yesterday&#39;s post,
one of the declarations that often causes repetition is setting up fluid typography.&lt;/p&gt;
&lt;p&gt;This is a two key steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculating the progress from a minimum to a maximum viewport size.&lt;/li&gt;
&lt;li&gt;Interpolating between two (font-size) values based on that progress.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While is possible to achieve this in browsers now, the setup is complex, hard to read,
and can involve a lot of repetition when applying it to multiple values.&lt;/p&gt;
&lt;p&gt;For a while the specs had a generic &lt;code&gt;mix()&lt;/code&gt; function that could be used at the property level,
and has since gained additional separate &lt;code&gt;*-mix()&lt;/code&gt; functions that can be used as individual components,
such as &lt;code&gt;calc-mix()&lt;/code&gt; that takes a &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; value and two calc sums.&lt;/p&gt;
&lt;p&gt;What remained was a method to simplify progress calculation.
With custom CSS functions, one could simplify the calculation and avoid repitition,
but as this is a calculation many authors will have to set up, why not make it a native CSS feature?&lt;/p&gt;
&lt;p&gt;Fortunately &lt;a href=&quot;https://drafts.csswg.org/css-values-5/#progress-func&quot;&gt;CSS Values and Units Module Level 5&lt;/a&gt; now defines such a general &lt;code&gt;progress()&lt;/code&gt; function,
and additionally a &lt;code&gt;media-progress()&lt;/code&gt; and a &lt;code&gt;container-progress()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It the future, they can be used as below:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;/* Alternatively */&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;media-progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a browser prototype for both the &lt;code&gt;progress()&lt;/code&gt;, &lt;code&gt;*-progress()&lt;/code&gt; and &lt;code&gt;*-mix()&lt;/code&gt; functions
to make progress towards a simpler and more readable setup of fluid typography.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/7268&quot;&gt;Proposal for a &#39;progress&#39; function to calculate progress between two &lt;length&gt; values&lt;/length&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/6245&quot;&gt;Interpolate values between breakpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 12: Custom CSS Functions</title>
    <link href="https://johannesodland.github.io/2024/12/12/web-wish-12-custom-css-functions.html" />
    <updated>2024-12-12T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/12/web-wish-12-custom-css-functions.html</id>
    <content type="html">&lt;p&gt;Some CSS declarations tend to repeat with only minor tweaks to their values
– like converting &lt;code&gt;px&lt;/code&gt; to &lt;code&gt;rem&lt;/code&gt;, or setting up fluid typography.&lt;/p&gt;
&lt;p&gt;With the introduction of custom properties,
it became possible to build function-like custom properties to reduce this repetition.
&lt;a href=&quot;https://www.miriamsuzanne.com&quot;&gt;Miriam Suzanne&lt;/a&gt; demonstrated this brilliantly in &lt;a href=&quot;https://www.smashingmagazine.com/2019/07/css-custom-properties-cascade/&quot;&gt;Custom Properties in the Cascade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While useful, this technique has its limitations.&lt;/p&gt;
&lt;p&gt;Thankfully &lt;a href=&quot;https://www.miriamsuzanne.com&quot;&gt;Miriam&lt;/a&gt; has proposed a new solution: &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9350&quot;&gt;Custom CSS Functions and Mixins&lt;/a&gt;.
The &lt;a href=&quot;https://drafts.csswg.org/css-mixins-1/&quot;&gt;editors draft&lt;/a&gt; is beginning to take shape,
and introduces the ability to define custom functions with &lt;code&gt;@function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s how it could look:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;--as-rem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--length &amp;lt;length&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; / 16px * 1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;--as-rem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;22px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mixins might still be a long way off, so this holiday, I&#39;m wishing for a browser prototype of custom CSS functions, available behind a flag.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9350&quot;&gt;Proposal: Custom CSS Functions &amp;amp; Mixins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 11: Scroll-Triggered Animations</title>
    <link href="https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html" />
    <updated>2024-12-11T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/11/web-wish-11-scroll-triggered-animations.html</id>
    <content type="html">&lt;p&gt;We often use IntersectionObserver to trigger animations based on scroll position.
This works, but it feels excessive load javascript boilerplate just to play and pause an animation.&lt;/p&gt;
&lt;p&gt;Scroll-driven animations lets us declaratively bind animations to the scroll position,
but there&#39;s currently no way to declaratively play and pause regular animations based on scroll position.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://front-end.social/@ydaniv&quot;&gt;Yehonatan Daniv&lt;/a&gt; &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;has proposed&lt;/a&gt; a solution that the working group has resolved to draft into &lt;a href=&quot;https://drafts.csswg.org/css-animations-2/&quot;&gt;CSS Animations Level 2&lt;/a&gt;.
The proposal includes an &lt;code&gt;animation-trigger&lt;/code&gt; property, allowing you to define animation triggers like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; --slide-in 330ms backwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;animation-trigger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; alternate entry 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope browsers will be interested in implementing this proposal.
It would help us eliminate a lot of boilerplate JavaScript.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8942&quot;&gt;Add animation-trigger for triggering animations when an element is in a timeline&#39;s range&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 10: Srcset for Video</title>
    <link href="https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html" />
    <updated>2024-12-10T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/10/web-wish-10-srcset-for-video.html</id>
    <content type="html">&lt;p&gt;As mentioned earlier, &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt; successfully landed support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;responsive video&lt;/a&gt; last year.&lt;/p&gt;
&lt;p&gt;While we now can use media queries to art direct video sources,
it should also be possible to provide multiple resolutions for each source and have the browser pick the optimal one.&lt;/p&gt;
&lt;p&gt;This is why I&#39;m wishing for browsers to implement support for &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; on the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements.
And, while they&#39;re at it figuring out how to support &lt;code&gt;sizes=auto&lt;/code&gt; for video would be a nice bonus.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10379&quot;&gt;HTML Video and its Source Elements Should Support SRCSET and SIZES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 9: Used Color Scheme Media Query</title>
    <link href="https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html" />
    <updated>2024-12-09T15:00:00Z</updated>
    <id>https://johannesodland.github.io/2024/12/09/web-wish-9-used-color-scheme-media-query.html</id>
    <content type="html">&lt;p&gt;Currently, you can use &lt;code&gt;prefers-color-scheme&lt;/code&gt; in the &lt;code&gt;media&lt;/code&gt; attribute of a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;
to provide video or images that matches the users preferred color scheme.&lt;/p&gt;
&lt;p&gt;However, this might not actually match the used color scheme,
as a different color scheme can be set in either &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt; or by setting the &lt;code&gt;color-scheme&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;I need a way to provide image and video sources that match the &lt;em&gt;used&lt;/em&gt; color scheme and not just the preferred one.
I&#39;ve written extensively about it in &lt;a href=&quot;https://johannesodland.github.io/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html&quot;&gt;The Case for a Used-Color-Scheme Media Feature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This holiday I&#39;m wishing for a way to provide light and dark mode image sources, so they can match the used color scheme.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249&quot;&gt;Effect of &lt;meta name=&quot;color-scheme&quot;&gt; on the (prefers-color-scheme) MQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>