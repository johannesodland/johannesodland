<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Johannes Odland</title>
  <subtitle>Infrequent posts about CSS and other frontend stuff.</subtitle>
  <link href="https://johannesodland.github.io/eleventy-base-blog/feed.xml" rel="self" />
  <link href="https://johannesodland.github.io/eleventy-base-blog/" />
  <updated>2024-12-08T15:00:00Z</updated>
  <id>https://johannesodland.github.io/eleventy-base-blog/</id>
  <author>
    <name>Johannes Odland</name>
  </author>
  <entry>
    <title>Web Wish 8: End Side Padding on Scroll Containers</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/08/web-wish-8-end-side-padding.html" />
    <updated>2024-12-08T15:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/08/web-wish-8-end-side-padding.html</id>
    <content type="html">&lt;p&gt;One of the longest-running issues I&#39;ve followed is &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;how to handle padding in a scroll container&lt;/a&gt;.
The issue was first opened in 2016.&lt;/p&gt;
&lt;p&gt;Most developers expected padding to be added at the end of the in-flow content of the scroll container.
This was also how it was specified in &lt;a href=&quot;https://www.w3.org/TR/css-overflow-3/&quot;&gt;Overflow 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, browsers handled this differently, and it wasn&#39;t clear if the desired behavior was web-compatible.
Inline padding was particularly problematic,
as all browsers agreed on excluding it.
Changing this could cause web-compat issues as pages could rely on the current behavior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It was a mess.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But slowly and steadily, the issues were worked out.&lt;/p&gt;
&lt;p&gt;In 2019 the working group resolved to &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;always include padding in grid and flexbox containers&lt;/a&gt;,
as there were no web-compat issues there.&lt;/p&gt;
&lt;p&gt;Then, Blink finally ironed out the last web-compat issues,
and in 2022, the working group resolved to always include inline-end padding.&lt;/p&gt;
&lt;p&gt;Firefox has just begun passing &lt;a href=&quot;https://wpt.fyi/results/css/css-overflow/scrollable-overflow-padding.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;all the tests&lt;/a&gt;,
and while Safari is not fully compliant yet, the situation has improved significantly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or, so I thought.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that IntersectionObserver in Safari &lt;a href=&quot;https://wpt.fyi/results/intersection-observer/padding-clip.html?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;doesn&#39;t support padding on the scroll container correctly&lt;/a&gt;.
While padding is now usable on scroll containers in many cases,
any IntersectionObservers that use the scroll container as root may behave erratically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, this Christmas I&#39;m wishing for Safari to support padding correctly in IntersectionObservers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/129&quot;&gt;Include padding in scrollable overflow area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/3665&quot;&gt;Clarify padding in overflow content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/IntersectionObserver/issues/504&quot;&gt;Clarify root rect with overflow and padding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=263316&quot;&gt;IntersectionObserver root rect with padding is incorrect if there&#39;s overflow clipping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 7: Custom Element Disconnected Signal</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/07/web-wish-7-custom-element-disconnected-signal.html" />
    <updated>2024-12-07T19:30:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/07/web-wish-7-custom-element-disconnected-signal.html</id>
    <content type="html">&lt;p&gt;Managing lifecycles in custom elements can be tedious.
For instance, any event listener on global objects added in &lt;code&gt;connectedCallback()&lt;/code&gt; must be removed in &lt;code&gt;disconnectedCallback()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This double bookkeeping is error-prone, and could be simpler.
Using an &lt;code&gt;AbortController&lt;/code&gt; can simplify things by automatically removing event listeners when the &lt;code&gt;abort()&lt;/code&gt; method is called.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  #abortController
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;disconnectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#abortController&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This process would be much cleaner if the HTMLElement offered a built-in &lt;code&gt;disconnectedSignal()&lt;/code&gt;.
Luckily, &lt;a href=&quot;https://indieweb.social/@keithamus&quot;&gt;Keith Cirkel&lt;/a&gt; &lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;has proposed such a signal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this proposal, the example above would become:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeElement&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;connectedCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnectedSignal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a &lt;code&gt;disconnectedSignal()&lt;/code&gt; method to automatically remove event listeners
when an element is disconnected.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/dom/issues/1296&quot;&gt;Provide an AbortSignal that aborts when Nodes become disconnected&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 6: Responsive Posters</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/06/web-wish-6-responsive-posters.html" />
    <updated>2024-12-06T15:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/06/web-wish-6-responsive-posters.html</id>
    <content type="html">&lt;p&gt;Last year, we finally regained support for &lt;a href=&quot;https://scottjehl.com/posts/using-responsive-video/&quot;&gt;using media queries for delivering responsive video&lt;/a&gt;,
thanks to &lt;a href=&quot;https://scottjehl.com/&quot;&gt;Scott Jehl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is awesome, but there&#39;s still room for improvement.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element still supports only a single source for the poster image.
Wouldn&#39;t it be great if you could deliver responsive poster images along with the responsive video?&lt;/p&gt;
&lt;p&gt;One way to do this would be &lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;allowing a child &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element to control the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; poster&lt;/a&gt;.
This would enable support for using media-queries to art direct the poster images, matching the video source.
It would also allow for multiple resolutions of the poster image,
lazy-loading of the poster image and adding an alt-text to the poster image.&lt;/p&gt;
&lt;p&gt;This Christmas, I&#39;m wishing for a way to add responsive poster images to the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/10378&quot;&gt;HTML Video: Allow a child Picture Element to Control the Video Poster Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/6636&quot;&gt;Lazy loading video element poster attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/7954&quot;&gt;Considerations for providing alternative text to video poster graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 5: Overflow Contribution</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/05/web-wish-5-overflow-contribution.html" />
    <updated>2024-12-05T15:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/05/web-wish-5-overflow-contribution.html</id>
    <content type="html">&lt;p&gt;Have you ever had a scrollbar appear unexpectedly?
Perhaps a rogue horizontal scrollbar on the page?&lt;/p&gt;
&lt;p&gt;I often find myself hunting for the element that causes the scrollable overflow area to grow
– the cause of the rogue scrollbar.
Normally I can solve the issue by adding &lt;code&gt;overflow: clip&lt;/code&gt; to a parent element.&lt;/p&gt;
&lt;p&gt;Unfortunately, that&#39;s not always possible.
You might not want to clip the element to the parent elements bounds.
Additionally, adding &lt;code&gt;overflow: clip&lt;/code&gt; forces &lt;code&gt;transform-style: flat&lt;/code&gt;,
which can wreak havoc if the elements are part of a 3d rendering context.&lt;/p&gt;
&lt;p&gt;Imagine being able to set a CSS property like &lt;code&gt;overflow-contribution: none&lt;/code&gt; to exclude elements from
contributing to the overflow area?&lt;/p&gt;
&lt;p&gt;The CSSWG has resolved to adopt this feature, but it still needs to a formal specification.&lt;/p&gt;
&lt;p&gt;This holiday season, I&#39;m hoping for implementer interest in a CSS property that prevent elements from contributing to scrollable overflow.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8361&quot;&gt;add method to prevent elements from contributing to scrollable overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8400&quot;&gt;Ability to ignore specific descendants when generating scrollbars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 4: set-range-text command</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/04/web-wish-4-set-range-text-command.html" />
    <updated>2024-12-04T18:30:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/04/web-wish-4-set-range-text-command.html</id>
    <content type="html">&lt;p&gt;My drafts folder is full of half written posts on punctuation and special characters.
The reason I come back to this theme is that the technological development of the last 100+ years
have made it incredibly hard to enter and edit special characters on the web.&lt;/p&gt;
&lt;p&gt;In Norwegian, the most common quotation marks are not available on the keyboard,
so professional writers have to rely on difficult to remember short codes that vary across operating systems.&lt;/p&gt;
&lt;p&gt;Some editors use “smart quotes” to automatically replace the typed characters with the correct ones,
but this solution only works within certain systems,
and lacks the flexibility authors need to choose specific quotation marks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time and time again I&#39;ve had to be the middle man apologizing for how hard this is.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the lacking physical keys for special characters across languages,
it should be easy to add special characters to form inputs –
preferably without complex JavaScript setup.&lt;/p&gt;
&lt;p&gt;The recent &lt;a href=&quot;https://open-ui.org/components/invokers.explainer/&quot;&gt;Invoker Commands proposal&lt;/a&gt; makes it possible to add commands to buttons in a declarative
way, removing the need for JavaScript and paving the cowpath for simple commands like opening and closing a dialog.
Initially this will support commands like &lt;code&gt;toggle-popover&lt;/code&gt;, &lt;code&gt;show-modal&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;,
but many other commands like &lt;code&gt;step-up&lt;/code&gt; and &lt;code&gt;step-down&lt;/code&gt; have been suggested.&lt;/p&gt;
&lt;p&gt;To make entering special characters easier for everyone,
I wish for a new declarative &lt;a href=&quot;https://github.com/openui/open-ui/issues/1062&quot;&gt;&lt;code&gt;set-range-text&lt;/code&gt; command&lt;/a&gt; for &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;
and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, that calls &lt;code&gt;.setRangeText()&lt;/code&gt; with the button&#39;s value.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openui/open-ui/issues/1062&quot;&gt;[invokers] setRangeText for textarea and inputs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 3: Layer Based SVG Engine (LBSE)</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/03/web-wish-3-layer-based-svg-engine.html" />
    <updated>2024-12-03T15:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/03/web-wish-3-layer-based-svg-engine.html</id>
    <content type="html">&lt;p&gt;I love listening to &lt;a href=&quot;https://www.igalia.com/chats/&quot;&gt;Igalia Chats&lt;/a&gt;,
especially when they bring on people who have been an integral part of the development of the web.
One of my favourite episodes is where Nikolas Zimmermann talks about
&lt;a href=&quot;https://www.igalia.com/chats/Igalia-Chats-Niko-SVG-WPE&quot;&gt;how he and Rob Buis built the KSVG library&lt;/a&gt; which eventually powered SVG rendering in WebKit.&lt;/p&gt;
&lt;p&gt;In that episode he explains how HTML and SVG currently has two separate rendering paths in WebKit.
While SVG was once more powerful than HTML and CSS, with support for transforms, filters and masking,
HTML and CSS has since gained these capabilities &lt;em&gt;and&lt;/em&gt; now have a hardware accelerated rendering path.&lt;/p&gt;
&lt;p&gt;The current SVG engine in WebKit does not support hardware-accelerated compositing.
Changes to transforms or opacity in an SVG triggers a full re-render, while in HTML and CSS such changes would
be handled through hardware-accelerated compositing.&lt;/p&gt;
&lt;p&gt;At the time of recording, Zimmerman and Igalia had prototyped a way to harmonize the rendering of HTML and SVG,
using the Layer Tree — a structure that organizes rendering layers for compositing — to enable hardware accelerated SVG rendering.
This harmonization would remove duplication and allow SVG to handle complex animations more efficiently.&lt;/p&gt;
&lt;p&gt;It&#39;s almost five years since that episode aired, and a lot has happened in the meanwhile.
While the prototype proved the concepts of the new &lt;a href=&quot;https://wpewebkit.org/blog/05-new-svg-engine.html&quot;&gt;Layer Based SVG Engine (LBSE)&lt;/a&gt;,
it was still just a prototype and needed to be upstreamed into the WebCore in manageable, reviewable chunks.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://wpewebkit.org/blog/05-new-svg-engine.html&quot;&gt;Status of the new SVG engine in WebKit&lt;/a&gt; post on &lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/12/03/wpewebkit.org&quot;&gt;wpewebkit.org&lt;/a&gt; covers the progress in detail.&lt;/p&gt;
&lt;p&gt;Currently, LBSE coexists with the legacy engine behind a compile-time flag.
The new engine adds hardware accelerated compositing, 3D-transforms, and z-index support for all SVG elements.&lt;/p&gt;
&lt;p&gt;Before it can replace the legacy engine, the new SVG engine still needs to reach feature parity,
meet security requirements, and match the legacy engine&#39;s performance benchmarks.
An &lt;a href=&quot;https://wpewebkit.org/blog/status-of-lbse-in-webkit.html&quot;&gt;update from this summer&lt;/a&gt; covers the progress made over the last year,
showing that the new engine is inching towards becoming a complete replacement.&lt;/p&gt;
&lt;p&gt;While it &lt;em&gt;is&lt;/em&gt; getting closer to replace the old engine, there are still some issues that needs to be resolved before
WebKit can make the switch.&lt;/p&gt;
&lt;p&gt;While asking for LBSE to land before Christmas might be too much,
I hope Igalia Chats will invite Nikolas Zimmermann back to discuss the progress made over the last five years.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=90738&quot;&gt;Harmonize HTML &amp;amp; SVG rendering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 2: Native Low Quality Image Preview (LQIP)</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/02/web-wish-2-native-low-quality-image-preview-lqip.html" />
    <updated>2024-12-02T17:30:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/02/web-wish-2-native-low-quality-image-preview-lqip.html</id>
    <content type="html">&lt;p&gt;Implementing lazy-loading images has never been easier.&lt;/p&gt;
&lt;p&gt;First we got support for the &lt;a href=&quot;https://github.com/whatwg/html/issues/2806&quot;&gt;&lt;code&gt;loading=lazy&lt;/code&gt;&lt;/a&gt; attribute, making it easy to defer images.
Then came automatic aspect-ratio calculations based on &lt;a href=&quot;https://github.com/WICG/intrinsicsize-attribute/issues/16#issuecomment-503245998&quot;&gt;the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes&lt;/a&gt;,
fixing annoying layout shifts.
Just recently, support for &lt;a href=&quot;https://github.com/whatwg/html/issues/4654&quot;&gt;&lt;code&gt;sizes=auto&lt;/code&gt;&lt;/a&gt; has started to arrive,
taking away the hassle – and sometimes impossible task – of specifying image sizes upfront.&lt;/p&gt;
&lt;p&gt;There is one thing that I think is missing from native lazy loading images, though.
That is having support for low quality image previews (LQIP).&lt;/p&gt;
&lt;p&gt;On a fast fiber connection, you might not even notice that the images are lazy-loaded.
But on a slow connection, they can appear as blank placeholders before the actual image is loaded.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use tricks like setting &lt;code&gt;background-image: url(lqip.webp)&lt;/code&gt; for low quality previews,
but this only works for the simplest cases.&lt;/p&gt;
&lt;p&gt;Things get messy if the image has multiple sources, or uses &lt;code&gt;object-fit&lt;/code&gt; settings like &lt;code&gt;contain&lt;/code&gt; or &lt;code&gt;cover&lt;/code&gt; –
at which point it can become &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8243&quot;&gt;nearly impossible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, for Christmas, I wish that low quality image previews were natively supported,
and that we can set an LQIP source for each &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;element.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/html/issues/3631&quot;&gt;Controlling the appearance of images being loaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8243&quot;&gt;Add &#39;replacement-box&#39; as option to background-origin and background-clip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Web Wish 1: `text-wrap: balance` and `box-decoration-break: clone`</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/12/01/web-wish-1-text-wrap-balance-and-box-decoration-break-clone.html" />
    <updated>2024-12-01T10:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/12/01/web-wish-1-text-wrap-balance-and-box-decoration-break-clone.html</id>
    <content type="html">&lt;p&gt;I&#39;ve been waiting for &lt;code&gt;text-wrap: balance&lt;/code&gt; since &lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style//2015Jan/0361.html&quot;&gt;it was added&lt;/a&gt;
to the &lt;a href=&quot;https://drafts.csswg.org/css-text-4/#text-wrap-style&quot;&gt;editors draft of &lt;code&gt;css-text-4&lt;/code&gt;&lt;/a&gt; in 2015.
Naturally, I was excited when &lt;code&gt;text-wrap: balance&lt;/code&gt; was included in &lt;a href=&quot;https://web.dev/blog/interop-2024&quot;&gt;interop 2024&lt;/a&gt;.
However, it seems I might have gotten my hopes up a little too soon.&lt;/p&gt;
&lt;p&gt;I see two major use cases for &lt;code&gt;text-wrap: balance&lt;/code&gt;.
The first is to balance text in headings, so that we don&#39;t end up with an unsightly orphan on the last line.
The second is to balance text when we present the text with slabs behind it.
Unbalanced text sticks out like a sore thumb here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://johannesodland.github.io/eleventy-base-blog/assets/web-wishlist-2024/text-wrap-balance/text-wrap-balance-slab.webp&quot; alt=&quot;Two screen grabs of an article with and without text-wrap: balance. 
        In the first screen grab, the first line is long but the second line contains one single word. 
        In the second screen grab, the two lines have equal length.&quot;&gt;
    &lt;figcaption&gt;
        Example of how a slabbed text line looks with and without `text-wrap: balance`. 
        Screenshots from the article 
        &lt;a href=&quot;https://www.nrk.no/dokumentar/xl/frostens-vokter-1.14755370&quot;&gt;Frostens vokter&lt;/a&gt;. 
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When &lt;code&gt;text-wrap: balance&lt;/code&gt; was implemented in Blink, it supported both these use cases.
However, in WebKit,
it seems that elements with inline children using &lt;code&gt;box-decoration-break: clone&lt;/code&gt; were excluded from balancing.
One possible reason for this could be the lack of a web platform test specifically for the interaction between these two properties.&lt;/p&gt;
&lt;p&gt;While waiting for full support across major browsers,
I&#39;ve used different techniques to balance the text with JavaScript.
It would be a relief to remove this code and have native support.&lt;/p&gt;
&lt;p&gt;So, for Christmas,
I&#39;m hoping that WebKit will bring full support for the combination of &lt;code&gt;text-wrap: balance&lt;/code&gt; and &lt;code&gt;box-decoration-break: clone&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Relevant issues and PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=274145&quot;&gt;Text-wrap balance with box-decoration-break clone child fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/web-platform-tests/wpt/pull/48445&quot;&gt;Add test for text-wrap: balance with box-decoration-break: clone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Case for a Used-Color-Scheme Media Feature</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html" />
    <updated>2024-10-14T18:30:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt; media feature
currently lets us detect if a user has requested a light or a dark color scheme on a system level.
This feature allows us to provide specific styles, images and videos to adapt to users’ preferences.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;While useful in its current form, it might not be flexible enough for some sites.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is evident on sites like GitHub and Mastodon which don&#39;t rely solely on the system preferences.
Instead they allow the user to set a site-specific preference, giving the option between light, dark or system color scheme.&lt;/p&gt;
&lt;p&gt;Some sites may also have pages that, by design, override the site-specific preferences.&lt;/p&gt;
&lt;p&gt;For these sites to share common stylesheets or media elements,
they need to be able to query the &lt;em&gt;used color scheme&lt;/em&gt; for that specific page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this post, I&#39;ll outline the efforts to tackle these challenges,
including the reasoning for why I think we need a new media feature to query the used color scheme.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Site specific preferences&lt;/h2&gt;
&lt;p&gt;Implementing dark-mode across an entire site can be a major undertaking.
Once it&#39;s done, you may prefer giving users the option to switch to the new color scheme,
rather than automatically aligning them with their system settings.
Users might be accustomed to the current color scheme, and forcing a change could lead to backlash.&lt;/p&gt;
&lt;p&gt;Some users might prefer a dark color scheme for their system,
but still prefer to read certain sites in light mode, such
as Sara Soueidan &lt;a href=&quot;https://x.com/SaraSoueidan/status/1421857067111956486&quot;&gt;pointed out in this tweet&lt;/a&gt;.
I agree with her; while I use a dark color scheme on a system level, I prefer to use some sites in light mode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To support this, you would need to provide a site-specific color scheme preference.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Page specific overrides&lt;/h2&gt;
&lt;p&gt;Even with a site-specific color scheme toggle, some pages might need to be exempted.
Some services or features might be designed to only work in light or dark mode.
One example is a video page that by design always uses dark mode, as &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249#issuecomment-2288822927&quot;&gt;Josh Tumath mentions in this comment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To support this, your stylesheets and media components must support page-specific overrides.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Current workarounds&lt;/h2&gt;
&lt;p&gt;Unfortunately, the built-in &lt;code&gt;prefers-color-scheme&lt;/code&gt; currently supports neither site-specific preferences, nor page-specific overrides.&lt;/p&gt;
&lt;p&gt;If you need this functionality on your site, it&#39;s up to you to implement your own custom darkmode toggle.
This is not straightforward and can require some duplication, as Bramus points out in his article
&lt;a href=&quot;https://www.bram.us/2022/05/25/dark-mode-toggles-should-be-a-browser-feature/&quot;&gt;Dark Mode Toggles Should be a Browser Feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You would have to implement a toggle,
then persist the value, fetch it the next time the user visits and respond to changed system preferences.
(Check out how Hidde implemented his in &lt;a href=&quot;https://hidde.blog/dark-light/&quot;&gt;How I built a dark mode toggle&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;However, by implementing your own toggle, you can no longer rely on the &lt;code&gt;prefers-color-scheme&lt;/code&gt; feature in your CSS,
or in your media sources.
This is a big issue if you need images or videos to match the color-scheme.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For me, this is one of the most pressing issues with the current state of color-scheme preferences.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A common issue I encounter is the need for illustrations or infographics to match the page&#39;s color scheme.&lt;/p&gt;
&lt;h2&gt;Proposed solutions&lt;/h2&gt;
&lt;p&gt;It probably won&#39;t surprise you that I share the views of &lt;a href=&quot;https://hidde.blog/dark-light/&quot;&gt;Hidde&lt;/a&gt;, &lt;a href=&quot;https://www.bram.us/2022/05/25/dark-mode-toggles-should-be-a-browser-feature/&quot;&gt;Bramus&lt;/a&gt; and &lt;a href=&quot;https://blog.jim-nielsen.com/2022/browser-level-color-scheme-preference/&quot;&gt;Jim Nielsen&lt;/a&gt;
that site-level dark-mode toggles should be a browser feature.&lt;/p&gt;
&lt;p&gt;There are a few proposals that would solve this, at least partly.&lt;/p&gt;
&lt;h3&gt;1. Web Preferences API&lt;/h3&gt;
&lt;p&gt;I would prefer an API like the &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/6517&quot;&gt;proposed&lt;/a&gt; &lt;a href=&quot;https://drafts.csswg.org/mediaqueries-5/#auto-pref%E2%91%A0&quot;&gt;Web Preferences API&lt;/a&gt;.&lt;br&gt;
This API would allow you to override the user preferences on your site using JavaScript.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;preferences&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colorScheme&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestOverride&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;dark&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(color-scheme: dark)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dark.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;light.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would allow the migration of existing user preferences and allow the users to toggle color scheme alongside other site-wide preferences.&lt;/p&gt;
&lt;p&gt;One issue though might be that you might no longer query the system wide preferences using &lt;code&gt;prefers-color-scheme&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. In browser settings per-site&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/WebKit/standards-positions/issues/252&quot;&gt;WebKit has opposed this API&lt;/a&gt;,
and suggests implementing per-site user preferences in the browser as an alternative.
I am less enthusiastic about this proposal.
Sites would have to drop their current toggle and existing user preferences.&lt;/p&gt;
&lt;h3&gt;3. Custom script based media queries&lt;/h3&gt;
&lt;p&gt;An alternative solution could be to use a &lt;a href=&quot;https://drafts.csswg.org/mediaqueries-5/#script-custom-mq&quot;&gt;custom script based media query&lt;/a&gt;,
also a part of Media Queries Level 5.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
    &lt;span class=&quot;token constant&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;customMedia&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;--used-color-scheme&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dark&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;_used-color-scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dark&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ... &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this would allow sites to create their own dark-mode toggle it would encourage non-standard media queries,
perhaps making it more difficult to share components across sites.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;⁂&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;While the above proposals for a site-specific user preference would be a significant improvement,
it won&#39;t address then need for page specific overrides.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;4. Meta affecting the prefers-color-scheme&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249&quot;&gt;Tab has opened an issue&lt;/a&gt; suggesting
that &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt; should affect the &lt;code&gt;(prefers-color-scheme:dark)&lt;/code&gt; media query.&lt;/p&gt;
&lt;p&gt;If accepted, this change could provide a quick solution for both site-specific preference, and specific overrides.
Because it directly impacts the existing &lt;code&gt;prefers-color-scheme&lt;/code&gt; it would also adress the issue of loading matching media assets&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;5. Style query&lt;/h3&gt;
&lt;p&gt;In the discussions on the issue above,
opinions seem to be shifting towards a container style query letting you query the &lt;em&gt;used&lt;/em&gt; color-scheme property.
A regular style query would match on the calculated value and we need to match on the used value,
so a new mechanism would have to be introduced to do this.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colorScheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dark&#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@container&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;used-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;color-scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dark&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ...
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, this would not solve the need for matching media assets to the page&#39;s used color scheme,
as media sources probably never will be selectable by style queries&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;6. Romans solution&lt;/h3&gt;
&lt;p&gt;Roman has found &lt;a href=&quot;https://blog.kizu.dev/querying-the-color-scheme/&quot;&gt;a technique&lt;/a&gt;
that lets you capture the used value of the &lt;code&gt;color-scheme&lt;/code&gt; property as a color using &lt;code&gt;light-dark()&lt;/code&gt; and a registered custom property.
With this captured value we can use style queries to adapt accordingly.
When used on &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, this could solve the need for adapting to the used color-scheme.&lt;/p&gt;
&lt;p&gt;This technique has some drawbacks, as Roman discusses in his article.
Also, because it relies on style queries,
it would not address my main concern of letting media assets adapt to the used color scheme.&lt;/p&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;To avoid awkward workarounds, a site-level &lt;code&gt;prefers-color-scheme&lt;/code&gt; toggle – preferably with a JavaScript API – is essential.
Additionally, there should be a way to override the preference per page, such as through &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The resulting used color-scheme should be usable in a media query to load corresponding dark and light mode images.
A style query would not adequately address this need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If its resolved that &lt;code&gt;prefers-color-scheme&lt;/code&gt; is unaffected by &lt;code&gt;&amp;lt;meta name=color-scheme&amp;gt;&lt;/code&gt;,
we should look into a new &lt;code&gt;used-color-scheme&lt;/code&gt; media feature.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Josh Tumath has suggested opening a new issue for that &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10249#issuecomment-2340321512&quot;&gt;in this comment&lt;/a&gt;.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Video posters would be an exception, but that is a &lt;a href=&quot;https://github.com/whatwg/html/issues/4004#issuecomment-1588568569&quot;&gt;whole other issue&lt;/a&gt;. &lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Media sources can not be affected by style and layout, unless lazy-loaded. &lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/10/14/the-case-for-a-used-color-scheme-media-feature.html#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>The case for multiple named insets</title>
    <link href="https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html" />
    <updated>2024-08-24T13:00:00Z</updated>
    <id>https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html</id>
    <content type="html">&lt;p&gt;When sticky positioning became supported in most&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; major browsers in 2017, it felt revolutionary.
The times of wrapper elements and swapping positioning schemes were soon a thing of the past.
We were on the track to providing a jitter free user experience.&lt;/p&gt;
&lt;p&gt;While revolutionary, it felt fairly limited.
These limitations were well documented in &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/2496&quot;&gt;issue #2496&lt;/a&gt; by jonjohnjohnson.&lt;/p&gt;
&lt;h2&gt;Constrained by its block level ancestor&lt;/h2&gt;
&lt;p&gt;One of the issues is that it is cumbersome to define the sticky constraint rectangle.&lt;/p&gt;
&lt;p&gt;The sticky element will only be pushed as far as it stays within its containing block.
But for sticky positioning the containing block is the nearest block level ancestor&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The sticky element cannot be wrapped by any block level element without being contained by it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes we need the sticky element to escape its block level ancestor and rather use a box further up the ancestor chain as a constraint.
Fortunately the CSSWG is discussing something like a &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9868&quot;&gt;&lt;code&gt;position-container&lt;/code&gt; property&lt;/a&gt; that will allow us to change the containing block.&lt;/p&gt;
&lt;p&gt;Hopefully, this issue will soon be resolved.&lt;/p&gt;
&lt;h2&gt;Defining insets from the containing block&lt;/h2&gt;
&lt;p&gt;The other issue is that it is cumbersome to define insets from the containing block.&lt;/p&gt;
&lt;p&gt;In absolute positioning, you can simply use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/inset&quot;&gt;box inset properties&lt;/a&gt; to define insets from the containing block.&lt;/p&gt;
&lt;p&gt;But for sticky positioning, the box inset properties are already used as insets from the scrollport.
Currently, they can&#39;t define insets from the containing block as well.&lt;/p&gt;
&lt;p&gt;To define insets from the containing block we have to use the margins of the element.
But, the margin properties are &lt;em&gt;also&lt;/em&gt; used to define the in-flow margin.&lt;/p&gt;
&lt;p&gt;Due to this dual interpretation, and that it is unclear how collapsing margins would apply,
&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/9052#issuecomment-1642600755&quot;&gt;the CSSWG has resolved&lt;/a&gt; to not consider the margins when calculating the sticky position.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This leaves us in a bind.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using margins is problematic, but currently it&#39;s the only way we can affect the insets from the containing block for sticky-pos elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We need to define insets for multiple boxes, but can currently only affect &lt;em&gt;one&lt;/em&gt; using the box inset properties.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;A proposal&lt;/h2&gt;
&lt;p&gt;Issue &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/2496&quot;&gt;#2496&lt;/a&gt; suggested adding a separate &lt;code&gt;sticky&lt;/code&gt; property.
But, it could be confusing if containing block insets  sometimes are defined in the box inset properties,
and other times in a separate property.&lt;/p&gt;
&lt;p&gt;What if we could define multiple named box insets?&lt;/p&gt;
&lt;p&gt;To define insets for a sticky positioned element that sticks to the scrollport and is inset 20px from the containing block, we could write this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;inset-block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  scrollport 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  containing-block 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the element was only to be sticky to the top, we could do this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; scrollport 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; containing-block 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since scrollport would be the default inset name under sticky positioning, the name could be dropped in the &lt;code&gt;top&lt;/code&gt; property.
This would ensure backwards compatibility.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; containing-block 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inset names that have no effect under the positioning scheme would simply be ignored.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Sticky positioning is still fairly limited.&lt;br&gt;
It&#39;s cumbersome to set insets from the containing block under sticky positioning, but it&#39;s &lt;em&gt;possible&lt;/em&gt; using margins.
Since the CSSWG has resolved to ignore margins, we need another way of defining these insets.&lt;/p&gt;
&lt;p&gt;I have &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/10754&quot;&gt;proposed to support multiple named insets&lt;/a&gt; in the box inset properties.&lt;/p&gt;
&lt;p&gt;Hopefully we can find a solution in the not-so-distant future.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Excluding IE that unfortunately stuck around for way to long. &lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This is simplified. Check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block&quot;&gt;Identifying the containing block&lt;/a&gt; for a more precise definition. &lt;a href=&quot;https://johannesodland.github.io/eleventy-base-blog/2024/08/24/the-case-for-multiple-insets.html#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
</feed>